<!-- livebook:{"autosave_interval_s":30} -->

# Advent of Code 2024 - Day 13

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Introduction

### --- Day 13: Claw Contraption ---

Next up: the [lobby](https://adventofcode.com/2020/day/24) of a resort on a tropical island. The Historians take a moment to admire the hexagonal floor tiles before spreading out.

Fortunately, it looks like the resort has a new [arcade](https://en.wikipedia.org/wiki/Amusement_arcade)! Maybe you can win some prizes from the [claw machines](https://en.wikipedia.org/wiki/Claw_machine)?

The claw machines here are a little unusual. Instead of a joystick or directional buttons to control the claw, these machines have two buttons labeled `A` and `B`. Worse, you can't just put in a token and play; it costs **3 tokens** to push the `A` button and **1 token** to push the `B` button.

With a little experimentation, you figure out that each machine's buttons are configured to move the claw a specific amount to the **right** (along the `X` axis) and a specific amount **forward** (along the `Y` axis) each time that button is pressed.

Each machine contains one **prize**; to win the prize, the claw must be positioned **exactly** above the prize on both the `X` and `Y` axes.

You wonder: what is the smallest number of tokens you would have to spend to win as many prizes as possible? You assemble a list of every machine's button behavior and prize location (your puzzle input). For example:

```
Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=8400, Y=5400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=12748, Y=12176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=7870, Y=6450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=18641, Y=10279
```

This list describes the button configuration and prize location of four different claw machines.

For now, consider just the first claw machine in the list:

* Pushing the machine's `A` button would move the claw `94` units along the `X` axis and `34` units along the `Y` axis.
* Pushing the `B` button would move the claw `22` units along the `X` axis and `67` units along the `Y` axis.
* The prize is located at `X=8400`, `Y=5400`; this means that from the claw's initial position, it would need to move exactly `8400` units along the `X` axis and exactly `5400` units along the `Y` axis to be perfectly aligned with the prize in this machine.

The cheapest way to win the prize is by pushing the `A` button `80` times and the `B` button `40` times. This would line up the claw along the `X` axis (because `80*94 + 40*22 = 8400`) and along the `Y` axis (because `80*34 + 40*67 = 5400`). Doing this would cost `80*3` tokens for the `A` presses and `40*1` for the `B` presses, a total of **`280`** tokens.

For the second and fourth claw machines, there is no combination of A and B presses that will ever win a prize.

For the third claw machine, the cheapest way to win the prize is by pushing the `A` button `38` times and the `B` button `86` times. Doing this would cost a total of **`200`** tokens.

So, the most prizes you could possibly win is two; the minimum tokens you would have to spend to win all (two) prizes is **`480`**.

You estimate that each button would need to be pressed **`no more than 100 times`** to win a prize. How else would someone be expected to play?

Figure out how to win as many prizes as possible. **What is the fewest tokens you would have to spend to win all possible prizes?**

### --- Part Two ---

As you go to win the first prize, you discover that the claw is nowhere near where you expected it would be. Due to a unit conversion error in your measurements, the position of every prize is actually `10000000000000` higher on both the `X` and `Y` axis!

Add `10000000000000` to the `X` and `Y` position of every prize. After making this change, the example above would now look like this:

```
Button A: X+94, Y+34
Button B: X+22, Y+67
Prize: X=10000000008400, Y=10000000005400

Button A: X+26, Y+66
Button B: X+67, Y+21
Prize: X=10000000012748, Y=10000000012176

Button A: X+17, Y+86
Button B: X+84, Y+37
Prize: X=10000000007870, Y=10000000006450

Button A: X+69, Y+23
Button B: X+27, Y+71
Prize: X=10000000018641, Y=10000000010279
```

Now, it is only possible to win a prize on the second and fourth claw machines. Unfortunately, it will take **many more than 100 presses** to do so.

Using the corrected prize coordinates, figure out how to win as many prizes as possible. **What is the fewest tokens you would have to spend to win all possible prizes?**

## Puzzle

<!-- livebook:{"attrs":"eyJhc3NpZ25fdG8iOiJwdXp6bGVfaW5wdXQiLCJkYXkiOiIxMyIsInNlc3Npb25fc2VjcmV0IjoiQU9DX1NFU1NJT04iLCJ5ZWFyIjoiMjAyNCJ9","chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2024", "13", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
IO.puts(puzzle_input)
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.split("\n\n", trim: true)
    |> Enum.map(fn arcade ->
      arcade
      |> String.split("\n", trim: true)
      |> Enum.map(fn line ->
        line
        |> String.split(~r/\D/, trim: true)
        |> Enum.map(&String.to_integer(&1))
      end)
    end)
    |> Enum.map(fn [[a, c], [b, d], [x, y]] ->
      %{"Button A" => {a, c}, "Button B" => {b, d}, "Prize" => {x, y}}
    end)
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  Button A: X+94, Y+34
  Button B: X+22, Y+67
  Prize: X=8400, Y=5400

  Button A: X+26, Y+66
  Button B: X+67, Y+21
  Prize: X=12748, Y=12176

  Button A: X+17, Y+86
  Button B: X+84, Y+37
  Prize: X=7870, Y=6450

  Button A: X+69, Y+23
  Button B: X+27, Y+71
  Prize: X=18641, Y=10279
  """
  @expected [
    %{"Button A" => {94, 34}, "Button B" => {22, 67}, "Prize" => {8400, 5400}},
    %{"Button A" => {26, 66}, "Button B" => {67, 21}, "Prize" => {12748, 12176}},
    %{"Button A" => {17, 86}, "Button B" => {84, 37}, "Prize" => {7870, 6450}},
    %{"Button A" => {69, 23}, "Button B" => {27, 71}, "Prize" => {18641, 10279}}
  ]

  test "parse test" do
    assert parse(@input) == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  # Apply Cramer's Rule
  #
  # |A|   | a  b |   |x|
  # | | * |      | = | |
  # |B|   | c  d |   |y|
  #
  # A = (x * d - y * b) / (a * d - c * b)
  #
  # B = (y * a - x * c) / (a * d - c * b)
  #

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.map(fn machine ->
      %{"Button A" => {a, c}, "Button B" => {b, d}, "Prize" => {x, y}} = machine

      [times_a(a, b, x, c, d, y), times_b(a, b, x, c, d, y)]
    end)
    |> Enum.filter(fn [{a, rem_a}, {b, rem_b}] ->
      cond do
        a > 100 -> false
        b > 100 -> false
        rem_a != 0 -> false
        rem_b != 0 -> false
        true -> true
      end
    end)
    |> Enum.map(fn [{a, _}, {b, _}] -> a * 3 + b end)
    |> Enum.sum()
  end

  def times_a(a, b, x, c, d, y) do
    {div(x * d - y * b, a * d - c * b), rem(x * d - y * b, a * d - c * b)}
  end

  def times_b(a, b, x, c, d, y) do
    {div(y * a - x * c, a * d - c * b), rem(y * a - x * c, a * d - c * b)}
  end
end
```

### Tests - Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  Button A: X+94, Y+34
  Button B: X+22, Y+67
  Prize: X=8400, Y=5400

  Button A: X+26, Y+66
  Button B: X+67, Y+21
  Prize: X=12748, Y=12176

  Button A: X+17, Y+86
  Button B: X+84, Y+37
  Prize: X=7870, Y=6450

  Button A: X+69, Y+23
  Button B: X+27, Y+71
  Prize: X=18641, Y=10279
  """
  @expected 480

  test "part one" do
    assert run(@input) == @expected
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> Parser.parse()
    |> Enum.map(fn machine ->
      %{"Button A" => {a, c}, "Button B" => {b, d}, "Prize" => {x, y}} = machine

      x = 10_000_000_000_000 + x
      y = 10_000_000_000_000 + y

      [times_a(a, b, x, c, d, y), times_b(a, b, x, c, d, y)]
    end)
    |> Enum.filter(fn [{_, rem_a}, {_, rem_b}] ->
      cond do
        rem_a != 0 -> false
        rem_b != 0 -> false
        true -> true
      end
    end)
    |> Enum.map(fn [{a, _}, {b, _}] -> a * 3 + b end)
    |> Enum.sum()
  end

  def times_a(a, b, x, c, d, y) do
    {div(x * d - y * b, a * d - c * b), rem(x * d - y * b, a * d - c * b)}
  end

  def times_b(a, b, x, c, d, y) do
    {div(y * a - x * c, a * d - c * b), rem(y * a - x * c, a * d - c * b)}
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  Button A: X+94, Y+34
  Button B: X+22, Y+67
  Prize: X=8400, Y=5400

  Button A: X+26, Y+66
  Button B: X+67, Y+21
  Prize: X=12748, Y=12176

  Button A: X+17, Y+86
  Button B: X+84, Y+37
  Prize: X=7870, Y=6450

  Button A: X+69, Y+23
  Button B: X+27, Y+71
  Prize: X=18641, Y=10279
  """
  @expected 875318608908

  test "part two" do
    assert run(@input) == @expected
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":9759,"stamp":{"token":"XCP.1ubgPuvznESLjPW-BpnDm76PPfbz7n5xn390uvi8itIuL6YEBim1H4fKw-uKP54_gmz-p9ykQpreMq9Qupbp9Tmj-1KucN-0TxK7QuHLTChFFP0EhNE","version":2}} -->
